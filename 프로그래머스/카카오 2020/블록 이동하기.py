"""
상하좌우 이동 및 90도 회전을 위한 리스트가 필요함.
로봇이 가로 방향일 때, 세로 방향일 때, 시계방향일 때, 반시계 방향일 때 회전의 조건이 다르므로, 분기

항상 position은 [좌, 우] 또는 [상, 하]를 유지하게 한다.

이동배열의 인덱스 = [
로봇의 상우하좌 이동 [0]
로봇이 가로방향일 때 [1]
    오른쪽을 기준으로 [0]
        시계뱡항 90도 회전[0]
            왼쪽칸 우상방향 이동[0], 기준의 위쪽 블럭 검사 [1]
        반시계뱡항 90도 회전[1]
            왼쪽칸 우하방향 이동[0], 기준의 아래쪽 블럭 검사[1]
    왼쪽을 기준으로 [1]
        시계뱡항 90도 회전[0]
            오른쪽칸 좌하방향 이동[0], 기준의 아래쪽 블럭 검사[1]
        반시계뱡항 90도 회전[1]
            오른쪽칸 좌상방향 이동[0], 기준의 위쪽 블럭 검사[1]
로봇이 세로방향일 때 [2]
    위쪽을 기준으로 [0]
        시계뱡항 90도 회전[0]
            아래쪽칸 좌상방향 이동[0], 기준의 왼쪽 블럭 검사[1]
        반시계뱡항 90도 회전[1]
            아래쪽칸 우상방향 이동[0], 기준의 오른쪽 블럭 검사[1]
    아래쪽을 기준으로 [1]
        시계뱡항 90도 회전[0]
            위쪽칸 우하방향 이동[0], 기준의 오른쪽 블럭 검사[1]
        반시계뱡항 90도 회전[1]
            위쪽칸 좌하방향 이동[0], 기준의 왼쪽 블럭 검사[1]
]
"""
from collections import deque


def solution(board):
    n = len(board)
    visited = [[0] * n for _ in range(n)]
    visited[0][0], visited[0][1] = 1, 1
    moves = [
        [[-1, 0, 1, 0], [0, 1, 0, -1]],  # 상, 우, 하, 좌
        # 로봇 가로방향[왼쪽 기준[시계방향[이동하는 칸 이동경로, 기준칸 대비 검사 칸 위치], 반시계방향[...]], 오른쪽기준[...]]
        [[[[-1, -1], [-1, 0]], [[1, -1], [1, 0]]], [[[1, 1], [1, 0]], [[-1, 1], [-1, 0]]]],
        # 로봇 세로방향[위쪽 기준[시계방향[이동하는 칸 이동경로, 기준칸 대비 검사 칸 위치], 반시계방향[...]], 아레쪽기준[...]]
        [[[[-1, -1], [0, -1]], [[-1, 1], [0, 1]]], [[[1, 1], [0, 1]], [[1, -1], [0, -1]]]]
    ]

    # [상, 하] or [좌, 우], 방향(상하:1, 좌우: 2),
    queue, direction = deque([[0, 0], [0, 1]]), 1
    print(queue)

    # 방향이 좌우일때
        # 상하좌우 이동
        # 좌측좌표 기준 시계, 반시계 방향 회전
        # 우측좌표 기준 시계, 반시계 방향 회전

    # 방향히 상하일때

    return


print(solution([[0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [0, 1, 0, 1, 1], [1, 1, 0, 0, 1], [0, 0, 0, 0, 0]]))
